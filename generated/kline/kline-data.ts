// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { KlineItem } from '../kline/kline-item';

export class KlineData {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): KlineData {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsKlineData(bb: flatbuffers.ByteBuffer, obj?: KlineData): KlineData {
    return (obj || new KlineData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsKlineData(bb: flatbuffers.ByteBuffer, obj?: KlineData): KlineData {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new KlineData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {
    return bb.__has_identifier('KLI1');
  }

  items(index: number, obj?: KlineItem): KlineItem | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new KlineItem()).__init(
          this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
          this.bb!
        )
      : null;
  }

  itemsLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startKlineData(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addItems(builder: flatbuffers.Builder, itemsOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, itemsOffset, 0);
  }

  static createItemsVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[]
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startItemsVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endKlineData(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static finishKlineDataBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset, 'KLI1');
  }

  static finishSizePrefixedKlineDataBuffer(
    builder: flatbuffers.Builder,
    offset: flatbuffers.Offset
  ) {
    builder.finish(offset, 'KLI1', true);
  }

  static createKlineData(
    builder: flatbuffers.Builder,
    itemsOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    KlineData.startKlineData(builder);
    KlineData.addItems(builder, itemsOffset);
    return KlineData.endKlineData(builder);
  }
}
