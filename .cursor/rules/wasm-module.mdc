---
description:
globs:
alwaysApply: false
---
# Rust WASM Module Guide

This project uses Rust with WebAssembly (WASM) for high-performance canvas rendering.

## WASM Module Structure

The WASM module is located in the [wasm-cal/](mdc:wasm-cal/) directory:

- `src/`: Rust source code
- `pkg/`: Compiled WASM package
- `Cargo.toml`: Rust dependencies and configuration

## Building the WASM Module

The WASM module is built using wasm-pack:

```bash
# Build the WASM module
cd wasm-cal
wasm-pack build --target web
```

This will generate the WASM package in the `pkg/` directory.

## Using the WASM Module in Next.js

The WASM module is imported and used in the application:

```tsx
// Example of importing and using the WASM module
import init, { renderCanvas } from '@/wasm-cal/pkg';

// Initialize the WASM module
await init();

// Use the WASM module to render on a canvas
const canvas = document.getElementById('canvas') as HTMLCanvasElement;
renderCanvas(canvas, data);
```

## FlatBuffers Integration

The project uses FlatBuffers for efficient data serialization between TypeScript and Rust:

- Schema definitions are in [schemas/](mdc:schemas/)
- Generated TypeScript code is in [generated/](mdc:generated/)
- Generated Rust code is in [wasm-cal/src/](mdc:wasm-cal/src/)

### Generating Code from Schemas

To generate code from FlatBuffers schemas:

```bash
pnpm run flatc:generate
```

This will generate:
- TypeScript code in the `generated/` directory
- Rust code in the `wasm-cal/src/` directory

## Performance Considerations

- WASM modules are loaded asynchronously
- Large data transfers between JavaScript and WASM should be minimized
- Use TypedArrays for efficient data transfer
- Consider using Web Workers for CPU-intensive tasks

## Best Practices

1. Keep the WASM module focused on performance-critical operations
2. Use FlatBuffers for efficient data serialization
3. Implement proper error handling for WASM operations
4. Test the WASM module in isolation before integrating with the application
5. Monitor memory usage when working with large datasets
