---
description:
globs:
alwaysApply: false
---
# Deployment Guide

This project uses Docker for containerization and Kubernetes for orchestration.

## Docker Configuration

The Dockerfile is located in [build-docker/Dockerfile](mdc:build-docker/Dockerfile) and follows a multi-stage build process:

1. **Base Stage**: Uses Node.js LTS as the base image
2. **Dependencies Stage**: Installs project dependencies using pnpm
3. **Builder Stage**: Builds the Next.js application
4. **Runner Stage**: Creates a production-ready image with only necessary files

### Key Docker Features

- Uses non-privileged user (`nextjs`) for security
- Implements health checks for container monitoring
- Configures environment variables for database connections
- Optimizes for React Server Components with appropriate environment variables
- Sets up proper file permissions for the non-privileged user

## Kubernetes Configuration

Kubernetes deployment configurations are located in the [k8s/](mdc:k8s/) directory.

### Deployment Verification

The [k8s/verify.sh](mdc:k8s/verify.sh) script can be used to verify the deployment status:

```bash
./k8s/verify.sh
```

This script checks:
- Deployment status
- Pod status
- Service availability

### Common Kubernetes Issues

- **Pending Pods**: Often due to resource constraints or scheduling issues
- **CrashLoopBackOff**: Usually indicates an application error
- **ImagePullBackOff**: Network issues or incorrect image references

## Environment Variables

The application requires the following environment variables for database connections:

- `MYSQL_HOST`: MySQL server hostname
- `MYSQL_USER`: MySQL username
- `MYSQL_PASSWORD`: MySQL password
- `MYSQL_DATABASE`: MySQL database name

## Deployment Considerations

- The application is configured to run on port 3000
- React Server Components require specific environment variables for proper functioning
- The Docker image is optimized for production use with minimal dependencies
- Kubernetes deployments should include resource limits and requests
- Health checks are implemented for better monitoring

## Troubleshooting

If you encounter issues with the deployment:

1. Check the pod logs: `kubectl logs <pod-name>`
2. Verify the deployment status: `kubectl describe deployment ts-next-template`
3. Check for resource constraints: `kubectl describe node`
4. Verify environment variables: `kubectl describe pod <pod-name>`
