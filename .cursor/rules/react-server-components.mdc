---
description:
globs:
alwaysApply: false
---
# React Server Components Guide

This project uses Next.js 15 with React Server Components (RSC) for efficient server-side rendering and data fetching.

## Next.js 15 Features

Next.js 15 includes several improvements for React Server Components:

- Improved streaming and partial rendering
- Enhanced caching mechanisms
- Better error handling and recovery
- Optimized bundle sizes

## RSC Configuration

The Next.js configuration in [next.config.ts](mdc:next.config.ts) includes settings for React Server Components:

- `output: 'standalone'`: Enables standalone output for Docker deployment
- Cross-origin isolation headers for security

## Data Fetching Patterns

### Server Components

Server components are the default in the `app/` directory. They can fetch data directly:

```tsx
// Example server component with data fetching
async function ServerComponent() {
  const data = await fetchData();
  return <div>{data}</div>;
}
```

### Client Components

Client components are marked with the `'use client'` directive:

```tsx
'use client';

// Client component example
function ClientComponent() {
  const [data, setData] = useState(null);
  
  useEffect(() => {
    // Client-side data fetching
    fetchData().then(setData);
  }, []);
  
  return <div>{data}</div>;
}
```

### Server Actions

Server actions are defined in the [app/actions/](mdc:app/actions/) directory and can be used for data mutations:

```tsx
'use server';

// Server action example
export async function updateData(formData) {
  // Process form data and update database
  return { success: true };
}
```

## React Query Integration

The project uses [@tanstack/react-query](mdc:components/get-query-client.ts) for client-side data fetching and caching.

## Common Issues and Solutions

- **TypeError: Failed to fetch**: Often related to network connectivity or CORS issues
- **React error #418**: Usually indicates a problem with React Server Components configuration
- **Network errors**: Check database connections and environment variables
- **Hydration errors**: Ensure server and client render the same content

## Best Practices

1. Use server components for data fetching when possible
2. Use client components for interactive UI elements
3. Implement proper error handling for data fetching
4. Use React Query for client-side data caching and state management
5. Leverage Next.js 15's improved caching mechanisms
6. Use streaming for large data sets
