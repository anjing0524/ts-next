// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod kline {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum PriceVolumeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PriceVolume<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PriceVolume<'a> {
  type Inner = PriceVolume<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PriceVolume<'a> {
  pub const VT_PRICE: flatbuffers::VOffsetT = 4;
  pub const VT_VOLUME: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PriceVolume { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PriceVolumeArgs
  ) -> flatbuffers::WIPOffset<PriceVolume<'bldr>> {
    let mut builder = PriceVolumeBuilder::new(_fbb);
    builder.add_volume(args.volume);
    builder.add_price(args.price);
    builder.finish()
  }


  #[inline]
  pub fn price(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PriceVolume::VT_PRICE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn volume(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PriceVolume::VT_VOLUME, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for PriceVolume<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f64>("price", Self::VT_PRICE, false)?
     .visit_field::<f64>("volume", Self::VT_VOLUME, false)?
     .finish();
    Ok(())
  }
}
pub struct PriceVolumeArgs {
    pub price: f64,
    pub volume: f64,
}
impl<'a> Default for PriceVolumeArgs {
  #[inline]
  fn default() -> Self {
    PriceVolumeArgs {
      price: 0.0,
      volume: 0.0,
    }
  }
}

pub struct PriceVolumeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PriceVolumeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_price(&mut self, price: f64) {
    self.fbb_.push_slot::<f64>(PriceVolume::VT_PRICE, price, 0.0);
  }
  #[inline]
  pub fn add_volume(&mut self, volume: f64) {
    self.fbb_.push_slot::<f64>(PriceVolume::VT_VOLUME, volume, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PriceVolumeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PriceVolumeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PriceVolume<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PriceVolume<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PriceVolume");
      ds.field("price", &self.price());
      ds.field("volume", &self.volume());
      ds.finish()
  }
}
pub enum KlineItemOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct KlineItem<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for KlineItem<'a> {
  type Inner = KlineItem<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> KlineItem<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
  pub const VT_OPEN: flatbuffers::VOffsetT = 6;
  pub const VT_HIGH: flatbuffers::VOffsetT = 8;
  pub const VT_LOW: flatbuffers::VOffsetT = 10;
  pub const VT_CLOSE: flatbuffers::VOffsetT = 12;
  pub const VT_B_VOL: flatbuffers::VOffsetT = 14;
  pub const VT_S_VOL: flatbuffers::VOffsetT = 16;
  pub const VT_VOLUMES: flatbuffers::VOffsetT = 18;
  pub const VT_LAST_PRICE: flatbuffers::VOffsetT = 20;
  pub const VT_BID_PRICE: flatbuffers::VOffsetT = 22;
  pub const VT_ASK_PRICE: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    KlineItem { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args KlineItemArgs<'args>
  ) -> flatbuffers::WIPOffset<KlineItem<'bldr>> {
    let mut builder = KlineItemBuilder::new(_fbb);
    builder.add_ask_price(args.ask_price);
    builder.add_bid_price(args.bid_price);
    builder.add_last_price(args.last_price);
    builder.add_s_vol(args.s_vol);
    builder.add_b_vol(args.b_vol);
    builder.add_close(args.close);
    builder.add_low(args.low);
    builder.add_high(args.high);
    builder.add_open(args.open);
    if let Some(x) = args.volumes { builder.add_volumes(x); }
    builder.add_timestamp(args.timestamp);
    builder.finish()
  }


  #[inline]
  pub fn timestamp(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(KlineItem::VT_TIMESTAMP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn open(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(KlineItem::VT_OPEN, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn high(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(KlineItem::VT_HIGH, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn low(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(KlineItem::VT_LOW, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn close(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(KlineItem::VT_CLOSE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn b_vol(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(KlineItem::VT_B_VOL, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn s_vol(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(KlineItem::VT_S_VOL, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn volumes(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceVolume<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceVolume>>>>(KlineItem::VT_VOLUMES, None)}
  }
  #[inline]
  pub fn last_price(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(KlineItem::VT_LAST_PRICE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn bid_price(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(KlineItem::VT_BID_PRICE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ask_price(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(KlineItem::VT_ASK_PRICE, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for KlineItem<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<f64>("open", Self::VT_OPEN, false)?
     .visit_field::<f64>("high", Self::VT_HIGH, false)?
     .visit_field::<f64>("low", Self::VT_LOW, false)?
     .visit_field::<f64>("close", Self::VT_CLOSE, false)?
     .visit_field::<f64>("b_vol", Self::VT_B_VOL, false)?
     .visit_field::<f64>("s_vol", Self::VT_S_VOL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PriceVolume>>>>("volumes", Self::VT_VOLUMES, false)?
     .visit_field::<f64>("last_price", Self::VT_LAST_PRICE, false)?
     .visit_field::<f64>("bid_price", Self::VT_BID_PRICE, false)?
     .visit_field::<f64>("ask_price", Self::VT_ASK_PRICE, false)?
     .finish();
    Ok(())
  }
}
pub struct KlineItemArgs<'a> {
    pub timestamp: i32,
    pub open: f64,
    pub high: f64,
    pub low: f64,
    pub close: f64,
    pub b_vol: f64,
    pub s_vol: f64,
    pub volumes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceVolume<'a>>>>>,
    pub last_price: f64,
    pub bid_price: f64,
    pub ask_price: f64,
}
impl<'a> Default for KlineItemArgs<'a> {
  #[inline]
  fn default() -> Self {
    KlineItemArgs {
      timestamp: 0,
      open: 0.0,
      high: 0.0,
      low: 0.0,
      close: 0.0,
      b_vol: 0.0,
      s_vol: 0.0,
      volumes: None,
      last_price: 0.0,
      bid_price: 0.0,
      ask_price: 0.0,
    }
  }
}

pub struct KlineItemBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> KlineItemBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: i32) {
    self.fbb_.push_slot::<i32>(KlineItem::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn add_open(&mut self, open: f64) {
    self.fbb_.push_slot::<f64>(KlineItem::VT_OPEN, open, 0.0);
  }
  #[inline]
  pub fn add_high(&mut self, high: f64) {
    self.fbb_.push_slot::<f64>(KlineItem::VT_HIGH, high, 0.0);
  }
  #[inline]
  pub fn add_low(&mut self, low: f64) {
    self.fbb_.push_slot::<f64>(KlineItem::VT_LOW, low, 0.0);
  }
  #[inline]
  pub fn add_close(&mut self, close: f64) {
    self.fbb_.push_slot::<f64>(KlineItem::VT_CLOSE, close, 0.0);
  }
  #[inline]
  pub fn add_b_vol(&mut self, b_vol: f64) {
    self.fbb_.push_slot::<f64>(KlineItem::VT_B_VOL, b_vol, 0.0);
  }
  #[inline]
  pub fn add_s_vol(&mut self, s_vol: f64) {
    self.fbb_.push_slot::<f64>(KlineItem::VT_S_VOL, s_vol, 0.0);
  }
  #[inline]
  pub fn add_volumes(&mut self, volumes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PriceVolume<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(KlineItem::VT_VOLUMES, volumes);
  }
  #[inline]
  pub fn add_last_price(&mut self, last_price: f64) {
    self.fbb_.push_slot::<f64>(KlineItem::VT_LAST_PRICE, last_price, 0.0);
  }
  #[inline]
  pub fn add_bid_price(&mut self, bid_price: f64) {
    self.fbb_.push_slot::<f64>(KlineItem::VT_BID_PRICE, bid_price, 0.0);
  }
  #[inline]
  pub fn add_ask_price(&mut self, ask_price: f64) {
    self.fbb_.push_slot::<f64>(KlineItem::VT_ASK_PRICE, ask_price, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> KlineItemBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    KlineItemBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<KlineItem<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for KlineItem<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("KlineItem");
      ds.field("timestamp", &self.timestamp());
      ds.field("open", &self.open());
      ds.field("high", &self.high());
      ds.field("low", &self.low());
      ds.field("close", &self.close());
      ds.field("b_vol", &self.b_vol());
      ds.field("s_vol", &self.s_vol());
      ds.field("volumes", &self.volumes());
      ds.field("last_price", &self.last_price());
      ds.field("bid_price", &self.bid_price());
      ds.field("ask_price", &self.ask_price());
      ds.finish()
  }
}
pub enum KlineDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct KlineData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for KlineData<'a> {
  type Inner = KlineData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> KlineData<'a> {
  pub const VT_ITEMS: flatbuffers::VOffsetT = 4;
  pub const VT_TICK: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    KlineData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args KlineDataArgs<'args>
  ) -> flatbuffers::WIPOffset<KlineData<'bldr>> {
    let mut builder = KlineDataBuilder::new(_fbb);
    builder.add_tick(args.tick);
    if let Some(x) = args.items { builder.add_items(x); }
    builder.finish()
  }


  #[inline]
  pub fn items(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<KlineItem<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<KlineItem>>>>(KlineData::VT_ITEMS, None)}
  }
  #[inline]
  pub fn tick(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(KlineData::VT_TICK, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for KlineData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<KlineItem>>>>("items", Self::VT_ITEMS, false)?
     .visit_field::<f64>("tick", Self::VT_TICK, false)?
     .finish();
    Ok(())
  }
}
pub struct KlineDataArgs<'a> {
    pub items: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<KlineItem<'a>>>>>,
    pub tick: f64,
}
impl<'a> Default for KlineDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    KlineDataArgs {
      items: None,
      tick: 0.0,
    }
  }
}

pub struct KlineDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> KlineDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_items(&mut self, items: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<KlineItem<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(KlineData::VT_ITEMS, items);
  }
  #[inline]
  pub fn add_tick(&mut self, tick: f64) {
    self.fbb_.push_slot::<f64>(KlineData::VT_TICK, tick, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> KlineDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    KlineDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<KlineData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for KlineData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("KlineData");
      ds.field("items", &self.items());
      ds.field("tick", &self.tick());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `KlineData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_kline_data_unchecked`.
pub fn root_as_kline_data(buf: &[u8]) -> Result<KlineData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<KlineData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `KlineData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_kline_data_unchecked`.
pub fn size_prefixed_root_as_kline_data(buf: &[u8]) -> Result<KlineData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<KlineData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `KlineData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_kline_data_unchecked`.
pub fn root_as_kline_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<KlineData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<KlineData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `KlineData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_kline_data_unchecked`.
pub fn size_prefixed_root_as_kline_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<KlineData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<KlineData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a KlineData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `KlineData`.
pub unsafe fn root_as_kline_data_unchecked(buf: &[u8]) -> KlineData {
  flatbuffers::root_unchecked::<KlineData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed KlineData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `KlineData`.
pub unsafe fn size_prefixed_root_as_kline_data_unchecked(buf: &[u8]) -> KlineData {
  flatbuffers::size_prefixed_root_unchecked::<KlineData>(buf)
}
pub const KLINE_DATA_IDENTIFIER: &str = "KLI1";

#[inline]
pub fn kline_data_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, KLINE_DATA_IDENTIFIER, false)
}

#[inline]
pub fn kline_data_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, KLINE_DATA_IDENTIFIER, true)
}

#[inline]
pub fn finish_kline_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<KlineData<'a>>) {
  fbb.finish(root, Some(KLINE_DATA_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_kline_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<KlineData<'a>>) {
  fbb.finish_size_prefixed(root, Some(KLINE_DATA_IDENTIFIER));
}
}  // pub mod Kline

